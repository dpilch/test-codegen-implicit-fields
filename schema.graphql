type Todo @aws_cognito_user_pools {
  content: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Patient {
  ssn: ID!
  givenName: String!
  familyName: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MedicalAppointment {
  appointmentReference: ID!
  patient: Patient
  provider: String
  date: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  medicalAppointmentPatientSsn: ID
  medicalAppointmentPatientGivenName: String
  medicalAppointmentPatientFamilyName: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection @aws_cognito_user_pools {
  items: [Todo]!
  nextToken: String
}

input ModelTodoFilterInput {
  content: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

type Query {
  getPatient(ssn: ID!, givenName: String!, familyName: String!): Patient
  listPatients(ssn: ID, givenNameFamilyName: ModelPatientPrimaryCompositeKeyConditionInput, filter: ModelPatientFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPatientConnection
  getMedicalAppointment(appointmentReference: ID!): MedicalAppointment
  listMedicalAppointments(appointmentReference: ID, filter: ModelMedicalAppointmentFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMedicalAppointmentConnection
  getTodo(id: ID!): Todo @aws_cognito_user_pools
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection @aws_cognito_user_pools
}

input ModelTodoConditionInput {
  content: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateTodoInput {
  content: String
  id: ID
}

input UpdateTodoInput {
  content: String
  id: ID!
}

input DeleteTodoInput {
  id: ID!
}

type Mutation {
  createPatient(input: CreatePatientInput!, condition: ModelPatientConditionInput): Patient
  updatePatient(input: UpdatePatientInput!, condition: ModelPatientConditionInput): Patient
  deletePatient(input: DeletePatientInput!, condition: ModelPatientConditionInput): Patient
  createMedicalAppointment(input: CreateMedicalAppointmentInput!, condition: ModelMedicalAppointmentConditionInput): MedicalAppointment
  updateMedicalAppointment(input: UpdateMedicalAppointmentInput!, condition: ModelMedicalAppointmentConditionInput): MedicalAppointment
  deleteMedicalAppointment(input: DeleteMedicalAppointmentInput!, condition: ModelMedicalAppointmentConditionInput): MedicalAppointment
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo @aws_cognito_user_pools
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo @aws_cognito_user_pools
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo @aws_cognito_user_pools
}

input ModelSubscriptionTodoFilterInput {
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionTodoFilterInput]
  or: [ModelSubscriptionTodoFilterInput]
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  owner: ModelStringInput
}

type Subscription {
  onCreatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["createPatient"])
  onUpdatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["updatePatient"])
  onDeletePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["deletePatient"])
  onCreateMedicalAppointment(filter: ModelSubscriptionMedicalAppointmentFilterInput): MedicalAppointment @aws_subscribe(mutations: ["createMedicalAppointment"])
  onUpdateMedicalAppointment(filter: ModelSubscriptionMedicalAppointmentFilterInput): MedicalAppointment @aws_subscribe(mutations: ["updateMedicalAppointment"])
  onDeleteMedicalAppointment(filter: ModelSubscriptionMedicalAppointmentFilterInput): MedicalAppointment @aws_subscribe(mutations: ["deleteMedicalAppointment"])
  onCreateTodo(filter: ModelSubscriptionTodoFilterInput, owner: String): Todo @aws_subscribe(mutations: ["createTodo"]) @aws_cognito_user_pools
  onUpdateTodo(filter: ModelSubscriptionTodoFilterInput, owner: String): Todo @aws_subscribe(mutations: ["updateTodo"]) @aws_cognito_user_pools
  onDeleteTodo(filter: ModelSubscriptionTodoFilterInput, owner: String): Todo @aws_subscribe(mutations: ["deleteTodo"]) @aws_cognito_user_pools
}

type ModelPatientConnection {
  items: [Patient]!
  nextToken: String
}

input ModelPatientFilterInput {
  ssn: ModelIDInput
  givenName: ModelStringInput
  familyName: ModelStringInput
  and: [ModelPatientFilterInput]
  or: [ModelPatientFilterInput]
  not: ModelPatientFilterInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelPatientConditionInput {
  and: [ModelPatientConditionInput]
  or: [ModelPatientConditionInput]
  not: ModelPatientConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePatientInput {
  ssn: ID!
  givenName: String!
  familyName: String!
}

input UpdatePatientInput {
  ssn: ID!
  givenName: String!
  familyName: String!
}

input DeletePatientInput {
  ssn: ID!
  givenName: String!
  familyName: String!
}

input ModelSubscriptionPatientFilterInput {
  ssn: ModelSubscriptionIDInput
  givenName: ModelSubscriptionStringInput
  familyName: ModelSubscriptionStringInput
  and: [ModelSubscriptionPatientFilterInput]
  or: [ModelSubscriptionPatientFilterInput]
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

type ModelMedicalAppointmentConnection {
  items: [MedicalAppointment]!
  nextToken: String
}

input ModelMedicalAppointmentFilterInput {
  appointmentReference: ModelIDInput
  provider: ModelStringInput
  date: ModelStringInput
  and: [ModelMedicalAppointmentFilterInput]
  or: [ModelMedicalAppointmentFilterInput]
  not: ModelMedicalAppointmentFilterInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  medicalAppointmentPatientSsn: ModelIDInput
  medicalAppointmentPatientGivenName: ModelStringInput
  medicalAppointmentPatientFamilyName: ModelStringInput
}

input ModelMedicalAppointmentConditionInput {
  provider: ModelStringInput
  date: ModelStringInput
  and: [ModelMedicalAppointmentConditionInput]
  or: [ModelMedicalAppointmentConditionInput]
  not: ModelMedicalAppointmentConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  medicalAppointmentPatientSsn: ModelIDInput
  medicalAppointmentPatientGivenName: ModelStringInput
  medicalAppointmentPatientFamilyName: ModelStringInput
}

input CreateMedicalAppointmentInput {
  appointmentReference: ID!
  provider: String
  date: AWSDateTime
  medicalAppointmentPatientSsn: ID
  medicalAppointmentPatientGivenName: String
  medicalAppointmentPatientFamilyName: String
}

input UpdateMedicalAppointmentInput {
  appointmentReference: ID!
  provider: String
  date: AWSDateTime
  medicalAppointmentPatientSsn: ID
  medicalAppointmentPatientGivenName: String
  medicalAppointmentPatientFamilyName: String
}

input DeleteMedicalAppointmentInput {
  appointmentReference: ID!
}

input ModelSubscriptionMedicalAppointmentFilterInput {
  appointmentReference: ModelSubscriptionIDInput
  provider: ModelSubscriptionStringInput
  date: ModelSubscriptionStringInput
  and: [ModelSubscriptionMedicalAppointmentFilterInput]
  or: [ModelSubscriptionMedicalAppointmentFilterInput]
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  medicalAppointmentPatientSsn: ModelIDInput
  medicalAppointmentPatientGivenName: ModelStringInput
  medicalAppointmentPatientFamilyName: ModelStringInput
}

input ModelPatientPrimaryCompositeKeyConditionInput {
  eq: ModelPatientPrimaryCompositeKeyInput
  le: ModelPatientPrimaryCompositeKeyInput
  lt: ModelPatientPrimaryCompositeKeyInput
  ge: ModelPatientPrimaryCompositeKeyInput
  gt: ModelPatientPrimaryCompositeKeyInput
  between: [ModelPatientPrimaryCompositeKeyInput]
  beginsWith: ModelPatientPrimaryCompositeKeyInput
}

input ModelPatientPrimaryCompositeKeyInput {
  givenName: String
  familyName: String
}
